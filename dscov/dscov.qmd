---
title: "Power analyses for genomic counts data"
author: August Guang
format: revealjs
code-fold: true
code-summary: "Show the code"
editor: visual
execute-dir: file
---

## Some preamble

-   Slides and all examples in more detail as their own Rmd notebooks available at: https://github.com/compbiocore/poweranalyses

-   Navigating to http://ccv.jupyter.brown.edu will provide an environment with all packages needed for these power analyses already installed

    -   From the terminal: https://github.com/compbiocore/poweranalyses.git

-   You can also follow along on your own desktop if you have R and these packages

## Power {style="fig-align: center"}

![](images/paste-D8BB697B.png)

## What are power analyses? {.smaller}

-   Power: The probability of detecting an effect if it is really there

-   Simple example:

    -   Hypothesis: High expression of gene A is associated with condition

    -   Study: 2 groups, 1 group with condition and 1 group without

    -   If we have a power of 80%, then 80% of the time we would see gene A be statistically differentially expressed between the 2 groups, and 20% time we would *not* see gene A be differentially expressed even though it is there in reality, i.e. false negatives

## Why should you do them?

## Why should you do them?

-   Questions you can answer with a power analysis:

    -   How many samples do I need to detect this effect with high probability?

    -   If I have this many samples (and know the effect size), how much power will I have to detect the effect?

-   Grant proposals often require them

## Why should you do them? {.smaller}

-   You probably do not want to get a false negative in your study so you want to have sufficient power

-   Low power is also tied to non-reproducibility of studies

    -   The lower the power of a study, the lower the probability that an observed effect that is considered to be statistically significant actually reflects a true effect

-   Winner's curse: Even when underpowered study discovers true effect, likely that estimate of magnitude of effect provided by study will be exaggerated

    -   Likely to occur whenever claims of discovery are based on thresholds of statistical significance or other selection factors like Bayes factor

    -   Effect inflation is worst for small, low-powered studies, which can only detect effects that happen to be large

## Power in practice {fig-align="center" smaller="true"}

![](images/paste-7B0DD601.png)

Dumas-Mallet et al. (2017)

## Power in practice {.smaller style="fig-align: center"}

::: columns
::: {.column width="50%"}
![](images/paste-2B6DBFB4.png)

Fraley & Vazire (2014)
:::

::: {.column width="50%"}
Button et al. (2013)

![](images/paste-8B382FD2.png)
:::
:::

## Counts data {.smaller}

Matrix where:

-   Rows are features, i.e. genes, taxa, etc.

-   Columns are samples

-   Values are counts of number of times feature appears in sample

|          | Sample1                      | Sample2                      |
|----------|------------------------------|------------------------------|
| Feature1 | Count of feature1 in sample1 | Count of feature1 in sample2 |
| Feature2 | Count of feature2 in sample1 | Count of feature2 in sample2 |
| Feature3 | Count of feature3 in sample1 | Count of feature3 in sample2 |

: Organization of counts data

## Counts data

Concrete example (this will be our matrix for our RNAseq analysis later)

```{r, rnaseq_setup, echo=FALSE}
library(RnaSeqSampleSize)
library(dplyr)
library(purrr)
library(ggplot2)
library(tidyverse)
set.seed(538734517)
```

```{r, rnaseq_data, echo=FALSE}
file_names <- c("../RNAseq/mouse_muscle_2019/SRS643406_SRX612440.dup.srtd.bam_htseq_counts", "../RNAseq/mouse_muscle_2019/SRS643403_SRX612437.dup.srtd.bam_htseq_counts", "../RNAseq/mouse_muscle_2019/SRS643407_SRX612441.dup.srtd.bam_htseq_counts", "../RNAseq/mouse_muscle_2019/SRS643404_SRX612438.dup.srtd.bam_htseq_counts")
types <- c("Innervated_WT_1", "Innervated_WT_2", "Denervated_WT_1", "Denervated_WT_2")
counts <- lapply(1:4, function(i) read.delim(file.path(file_names[i]),header=FALSE,col.names=c("gene_id","gene_name",types[i]))) %>% reduce(full_join)
dataMat <- counts[,3:6]
rownames(dataMat) <- counts$gene_id
head(dataMat)
genelist <- read.csv("../RNAseq/mouse_muscle_2019/gene_list.txt")
#head(genelist)
```

## Intuition behind power analyses for counts data

-   Provide counts matrices

-   Provide or estimate parameters that are part of analysis, i.e. expected fold-change, sequencing depth, subsampling rate

-   Package will either simulate additional datasets based on distribution with these parameters or fit model (i.e. negative binomial for RNAseq) to data and estimate power vs sample size

## Finding and formatting data

-   The best data comes from a pilot study

-   Otherwise, a study that is "close enough"

    -   Factors to consider: system, conditions, accessibility of counts matrix data (you can always run a pipeline to go from the raw reads to the counts matrix, but that's definitely extra work)

-   Control data can usually be found from a database like HMP

## Examples {style="fig-align: center"}

http://ccv.jupyter.brown.edu

![](images/paste-83A01B70.png)

## Some limitations

-   Power analyses do not generalize well - if method, data, etc changes you will need to update accordingly

-   Gives a "best case scenario" estimate

## Thanks!
